# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt6 import QtCore, QtGui, QtWidgets
import pyodbc  # Модуль для работы с базой данных Access
from PyQt6.QtCore import Qt, QAbstractTableModel, QVariant
from PyQt6.QtWidgets import QTableView, QApplication


class CustomTableModel(QAbstractTableModel):
    def __init__(self, data, header_data, parent=None):
        super().__init__(parent)
        self._data = data
        self._header_data = header_data

    def rowCount(self, parent=None):
        return len(self._data)

    def columnCount(self, parent=None):
        return len(self._data[0])

    def data(self, index, role=Qt.ItemDataRole.DisplayRole):
        if role == Qt.ItemDataRole.DisplayRole:
            return str(self._data[index.row()][index.column()])
        return QVariant()

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return str(self._header_data[section])
        return QVariant()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("DGTU")
        MainWindow.resize(800, 500)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMaximumSize(QtCore.QSize(1000, 500))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        MainWindow.setFont(font)
        MainWindow.setMouseTracking(False)
        MainWindow.setTabletTracking(False)
        MainWindow.setStyleSheet("color: white,background-color: rgb(122, 122, 122);\n"
                                 "color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 0, 300, 40))
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        font.setPointSize(9)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setStyleSheet("color: black;")
        self.label.setScaledContents(False)
        self.label.setWordWrap(False)
        self.label.setOpenExternalLinks(False)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(240, 60, 50, 25))
        self.pushButton.setStyleSheet("color: black;")
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 100, 300, 40))
        self.label_2.setStyleSheet("color:black")
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        font.setPointSize(9)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: black;")
        self.label_2.setScaledContents(False)
        self.label_2.setWordWrap(False)
        self.label_2.setOpenExternalLinks(False)
        self.label_2.setObjectName("label_2")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(240, 160, 50, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 200, 300, 40))
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        font.setPointSize(9)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label_3.setFont(font)
        self.label_3.setScaledContents(False)
        self.label_3.setWordWrap(False)
        self.label_3.setOpenExternalLinks(False)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 300, 300, 40))
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        font.setPointSize(9)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setScaledContents(False)
        self.label_4.setWordWrap(False)
        self.label_4.setOpenExternalLinks(False)
        self.label_4.setObjectName("label_4")
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(240, 350, 50, 25))
        self.pushButton_4.setObjectName("pushButton_4")
        self.tableView = QtWidgets.QTableView(parent=self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(320, 10, 360, 550))
        self.tableView.setStyleSheet("background-color: white;")
        self.tableView.setObjectName("tableView")
        self.tableView.setFixedSize(400, 400)  # Установите нужные размеры
        self.tableView.horizontalHeader().setStretchLastSection(True)
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(20, 60, 60, 25))
        self.comboBox.setObjectName("comboBox")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 40, 101, 16))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 140, 100, 20))
        self.label_6.setObjectName("label_6")
        self.comboBox_2 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(20, 160, 60, 25))
        self.comboBox_2.setObjectName("comboBox_2")
        self.label_7 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(130, 140, 100, 20))
        self.label_7.setObjectName("label_7")
        self.comboBox_3 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(130, 160, 101, 25))
        self.comboBox_3.setObjectName("comboBox_3")
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(240, 260, 50, 25))
        self.pushButton_3.setObjectName("pushButton_3")
        self.comboBox_4 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_4.setGeometry(QtCore.QRect(20, 260, 60, 25))
        self.comboBox_4.setObjectName("comboBox_4")
        self.label_8 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(10, 240, 100, 20))
        self.label_8.setObjectName("label_8")
        self.comboBox_5 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_5.setGeometry(QtCore.QRect(120, 260, 111, 25))
        self.comboBox_5.setObjectName("comboBox_5")
        self.label_9 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(130, 240, 100, 20))
        self.label_9.setObjectName("label_9")
        self.comboBox_6 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_6.setGeometry(QtCore.QRect(10, 350, 141, 25))
        self.comboBox_6.setObjectName("comboBox_6")
        self.label_10 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(10, 330, 121, 20))
        self.label_10.setObjectName("label_10")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 700, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.send_query_button_1)
        self.pushButton_2.clicked.connect(self.send_query_button_2)
        self.pushButton_3.clicked.connect(self.send_query_button_3)
        self.pushButton_4.clicked.connect(self.send_query_button_4)

    def load_semester_data(self):
        # Подключение к базе данных Access
        conn_str = r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\madin\Desktop\EducationSoftware\Агарагимов.accdb;'
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        # Выполнение запроса к базе данных Access (замените запрос на свой)
        cursor.execute('SELECT DISTINCT "Семестр" FROM Журнал')

        # Получение данных из запроса
        data = cursor.fetchall()

        # Заполнение QFontComboBox данными из базы данных
        for row in data:
            self.comboBox.addItem(str(row[0]))
            self.comboBox_2.addItem(str(row[0]))
            self.comboBox_4.addItem(str(row[0]))
            self.comboBox.addItem(str(row[0]))

        # Закрываем соединение с базой данных
        cursor.close()
        conn.close()

    def load_semester_data(self):
        # Подключение к базе данных Access
        conn_str = r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\madin\Desktop\EducationSoftware\Агарагимов.accdb;'
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        # Выполнение запроса к базе данных Access (замените запрос на свой)
        cursor.execute('SELECT DISTINCT "Семестр" FROM Журнал')

        # Получение данных из запроса
        data = cursor.fetchall()

        # Заполнение QFontComboBox данными из базы данных
        for row in data:
            self.comboBox.addItem(str(row[0]))
            self.comboBox_2.addItem(str(row[0]))
            self.comboBox_4.addItem(str(row[0]))
            self.comboBox_6.addItem(str(row[0]))

        # Закрываем соединение с базой данных
        cursor.close()
        conn.close()

    def load_group_data(self):
        # Подключение к базе данных Access
        conn_str = r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\madin\Desktop\EducationSoftware\Агарагимов.accdb;'
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        # Выполнение запроса к базе данных Access (замените запрос на свой)
        cursor.execute('SELECT DISTINCT "Название" FROM Группа')

        # Получение данных из запроса
        data = cursor.fetchall()

        # Заполнение QFontComboBox данными из базы данных
        for row in data:
            self.comboBox_3.addItem(str(row[0]))
            self.comboBox_5.addItem(str(row[0]))

        # Закрываем соединение с базой данных
        cursor.close()
        conn.close()

    def load_faculty_data(self):
        # Подключение к базе данных Access
        conn_str = r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\madin\Desktop\EducationSoftware\Агарагимов.accdb;'
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        # Выполнение запроса к базе данных Access (замените запрос на свой)
        cursor.execute('SELECT DISTINCT "Название_факультета" FROM Факультеты')

        # Получение данных из запроса
        data = cursor.fetchall()

        # Заполнение QFontComboBox данными из базы данных
        for row in data:
            self.comboBox_6.addItem(str(row[0]))

        # Закрываем соединение с базой данных
        cursor.close()
        conn.close()

    def send_query_button_1(self):
        try:
            # Получить значение выбранного семестра из QComboBox
            selected_semester = self.comboBox.currentText()

            # Выполнить SQL запрос с выбранным семестром
            conn_str = r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\madin\Desktop\EducationSoftware\Агарагимов.accdb;'
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()

            # Выполнение запроса к базе данных Access (замените запрос на свой)

            # Получение данных из запроса
            cursor.execute(f"""
                SELECT 
                    Код_группы,
                    CINT(SUM(IIF(Оценка = 5, 1, 0))) AS Отличники,
                    CINT(SUM(IIF(Оценка = 2, 1, 0))) AS Должники
                FROM Журнал WHERE Семестр = {selected_semester}
                GROUP BY Код_группы
            """)

            data = cursor.fetchall()

            print(data)

            header_data = ['Код группы', 'Отличников:', 'Должников:']
            self.model = CustomTableModel(data=data, header_data=header_data)
            #
            # Привязываем модель к QTableView
            self.tableView.setModel(self.model)
        except pyodbc.Error as e:
            pass

    def send_query_button_2(self):
        try:
            # Получить значение выбранного семестра из QComboBox
            selected_semester = self.comboBox_2.currentText()
            selected_group = self.comboBox_3.currentText()

            # Выполнить SQL запрос с выбранным семестром
            conn_str = r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\madin\Desktop\EducationSoftware\Агарагимов.accdb;'
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()

            # Выполнение запроса к базе данных Access (замените запрос на свой)

            # Получение данных из запроса
            cursor.execute(f"""
                SELECT 
                    Студенты.ФИО AS [ФИО студента],
                    Дисциплины.Название AS [Название дисциплины],
                    Журнал.Оценка AS [Оценка]
                FROM 
                    (((Журнал
                    INNER JOIN Студенты ON Журнал.Код_студента = Студенты.Код_студента)
                    INNER JOIN Дисциплины ON Журнал.Код_дисциплины = Дисциплины.Код_дисциплины)
                    INNER JOIN Группа ON Журнал.Код_группы = Группа.Код_группы)
                WHERE 
                    Журнал.Оценка < 3  AND
                    Группа.Название = '{selected_group}'
                    AND Журнал.Семестр = {selected_semester}
                ORDER BY 
                    Группа.Название 
            """)

            data = cursor.fetchall()

            print(data)
            if len(data) != 0:
                modified_data = [
                    ['пусто' if cell is None else cell for cell in row]  # Заменяем пустые значения на 'пусто'
                    for row in data
                ]
                header_data = ['ФИО', 'Дисциплина', 'Оценки']
                self.model = CustomTableModel(data=modified_data, header_data=header_data)
                self.tableView.setModel(self.model)
            else:
                header_data = ['ФИО', 'Дисциплина', 'Оценки']
                modified_data = [['пусто' for _ in range(len(header_data))]]  # Создаем строку из 'пусто'
                self.model = CustomTableModel(data=modified_data, header_data=header_data)
                self.tableView.setModel(self.model)
        except pyodbc.Error as e:
            print(f"An error occurred: {e}")

    def send_query_button_3(self):
        try:
            # Получить значение выбранного семестра из QComboBox
            selected_semester = self.comboBox_4.currentText()
            selected_group = self.comboBox_5.currentText()
            # Выполнить SQL запрос с выбранным семестром
            conn_str = r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\madin\Desktop\EducationSoftware\Агарагимов.accdb;'
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            # Выполнение запроса к базе данных Access (замените запрос на свой)
            # Получение данных из запроса
            cursor.execute(f"""
                           SELECT
                               Студенты.ФИО,
                               Журнал.Пропуски,
                               Журнал.Пропуски_по_уваж
                           FROM 
                               (Журнал
                               INNER JOIN Группа ON Журнал.Код_группы = Группа.Код_группы)
                               INNER JOIN Студенты ON Журнал.Код_студента = Студенты.Код_студента
                           WHERE 
                               Группа.Название = '{selected_group}'
                               AND Журнал.Семестр = {selected_semester}
                       """)

            data = cursor.fetchall()
            print(data)
            if len(data) != 0:
                modified_data = [
                    ['пусто' if cell is None else cell for cell in row]  # Заменяем пустые значения на 'пусто'
                    for row in data
                ]
                header_data = ['ФИО', 'Пропусков всего', 'Пропуски по уваж.причине']
                self.model = CustomTableModel(data=modified_data, header_data=header_data)
                self.tableView.setModel(self.model)
            else:
                header_data = ['ФИО', 'Пропусков всего', 'Пропуски по уваж.причине']
                modified_data = [['пусто' for _ in range(len(header_data))]]  # Создаем строку из 'пусто'
                self.model = CustomTableModel(data=modified_data, header_data=header_data)
                self.tableView.setModel(self.model)
        except pyodbc.Error as e:
            print(f"An error occurred: {e}")

    def send_query_button_4(self):
        try:
            # Получить значение выбранного семестра из QComboBox
            selected_semester = self.comboBox_6.currentText()

            # Выполнить SQL запрос с выбранным семестром
            conn_str = r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\madin\Desktop\EducationSoftware\Агарагимов.accdb;'
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            # Выполнение запроса к базе данных Access (замените запрос на свой)
            # Получение данных из запроса
            cursor.execute(f"""
                SELECT
                    Группа.Код_группы,
                    CINT(SUM(Журнал.Пропуски)) AS Пропуски_всего,
                    CINT(SUM(Журнал.Пропуски_по_уваж)) AS Пропуски_по_уваж
                FROM 
                    Журнал
                INNER JOIN 
                    Группа ON Журнал.Код_группы = Группа.Код_группы
                WHERE 
                    Журнал.Семестр = {selected_semester}
                GROUP BY
                    Группа.Код_группы
            """)

            data = cursor.fetchall()
            print(data)
            if len(data) != 0:
                modified_data = [
                    ['пусто' if cell is None else cell for cell in row]  # Заменяем пустые значения на 'пусто'
                    for row in data
                ]
                header_data = ['Код_группы', 'Количество всех пропусков', 'Количество по уваж.причине']
                self.model = CustomTableModel(data=modified_data, header_data=header_data)
                self.tableView.setModel(self.model)
            else:
                header_data = ['Код_группы', 'Количество всех пропусков', 'Количество по уваж.причине']
                modified_data = [['пусто' for _ in range(len(header_data))]]  # Создаем строку из 'пусто'
                self.model = CustomTableModel(data=modified_data, header_data=header_data)
                self.tableView.setModel(self.model)
        except pyodbc.Error as e:
            print(f"An error occurred: {e}")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Вывод количества отличников и должников"))
        self.pushButton.setText(_translate("MainWindow", "OK"))
        self.label_2.setText(_translate("MainWindow", "Вывод отличников и должников"))
        self.pushButton_2.setText(_translate("MainWindow", "OK"))
        self.label_3.setText(_translate("MainWindow", "Вывод количества пропусков"))
        self.label_4.setText(_translate("MainWindow", "Вывод количества пропусков по факультету"))
        self.pushButton_4.setText(_translate("MainWindow", "OK"))
        self.label_5.setText(_translate("MainWindow", "Выберите семестр"))
        self.label_6.setText(_translate("MainWindow", "Выберите семестр"))
        self.label_7.setText(_translate("MainWindow", "Выберите группу"))
        self.pushButton_3.setText(_translate("MainWindow", "OK"))
        self.label_8.setText(_translate("MainWindow", "Выберите семестр"))
        self.label_9.setText(_translate("MainWindow", "Выберите группу"))
        self.label_10.setText(_translate("MainWindow", "Выберите семестр"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    # Вызываем метод load_semester_data для загрузки данных из базы данных в QFontComboBox
    ui.load_semester_data()
    ui.load_group_data()


    MainWindow.show()
    sys.exit(app.exec())
